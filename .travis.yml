env:
  global:
    - REPO_DIR=pybox2d
    # Commit from your-project that you want to build
    - BUILD_COMMIT=2.3.10
    # pip dependencies to _build_ your project
    - BUILD_DEPENDS=""
    # pip dependencies to _test_ your project.  Include any dependencies
    # that you need, that are also specified in BUILD_DEPENDS, this will be
    # a separate install.
    - TEST_DEPENDS="pytest"
    - UNICODE_WIDTH=32
    - secure: "uUV+vFkA/ZpZe50tmt4fw4CpLzUVrxaSt6ht/ILPdgDu2cPa+AK931Vs2awB6mpCDdT1msW1M+ObD8XsAyd5zXwjICmOqoE2hSM6F5j29FgWjTZo+kF3POfAYe4WIFvgmn7bpesWPeTQqf90uBKkcJ0F/U82/oWbptVPdYtzgt24/M42brVvvG9qowe2NQBG4FVHRffv1LvXwj6mRqF1ESCwAe24GHNx7Yi/9vU4zAfqCuxl+A+T/DiXEic8ghxzYrIer/90gWLxWCE4Qc2YuvZ8AGkq9Jl9tz/xjifm4c7byZnMCjJ69cQfijTrZbEfbPDPnPIBcYWwPrm3qKMyAL5keI9D0laMVL4yDbIHsok8UqcY5fAb6LRxFLXimsEWoxkRzmsVZCbTNp2TybX/5PMwQcqaUYbL1BElyjugx2v8h6YLVHbd+LY2YGpR6VQxj9NJlf8Mws26ZftipW9Ermy6A6i/V/aTGNWWhQ5SFa1D3wPP9xJrBRcu5uMsMblyOvQoqO3J0QRFuFaeQWfDwIqTALhxs8DH4ZFRjrQpsKb0Mhg80pH7cXK/KpYHud18YqVdLRy5ShmD4YJKR1Mw0xXHj5ahTsVK/NcXL/knhp82fd0TOsgLlP0JeDDfszYd5CS+yhV4Csk2riRv1srLf5RAl3Lwd00G9xhPZKnsxTw="

# You will likely prefer "language: generic" for travis configuration,
# rather than, say "language: python". Multibuild doesn't use
# Travis-provided Python but rather installs and uses its own, where the
# Python version is set from the MB_PYTHON_VERSION variable. You can still
# specify a language here if you need it for some unrelated logic and you
# can't use Multibuild-provided Python or other software present on a
# builder.
language: generic

# For CPython macOS builds only, the minimum supported macOS version and
# architectures of any C extensions in the wheel are set with the variable
# MB_PYTHON_OSX_VER: 10.9 (64-bit only) or 10.6 (64/32-bit dual arch). By
# default this is set to the highest available for the Python version selected
# using MB_PYTHON_VERSION. You should only need to set this explicitly if you
# are building a 10.6 dual-arch build for a CPython version where both a 10.9 and
# 10.6 build are available (for example, 2.7 or 3.7).
# All PyPy macOS builds are 64-bit only.

# Required in Linux to invoke `docker` ourselves
services: docker

# Host distribution.  This is the distribution from which we run the build
# and test containers, via docker.
dist: xenial

matrix:
  include:
    - os: osx
      env:
        - MB_PYTHON_VERSION=3.5
    - os: osx
      env:
        - MB_PYTHON_VERSION=3.6
    - os: osx
      env:
        - MB_PYTHON_VERSION=3.7
        - MB_PYTHON_OSX_VER=10.6
    - os: osx
      env:
        - MB_PYTHON_VERSION=3.7
    - os: osx
      env:
        - MB_PYTHON_VERSION=3.8
    - os: osx
      language: generic
      env:
        - MB_PYTHON_VERSION=pypy-7.3
    - os: osx
      language: generic
      env:
        - MB_PYTHON_VERSION=pypy3-7.3
    - os: osx
      env:
        - MB_PYTHON_VERSION=2.7
        - MB_PYTHON_OSX_VER=10.6
    - os: osx
      env:
        - MB_PYTHON_VERSION=2.7

    - os: linux
      env:
        - MB_PYTHON_VERSION=3.5
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.5
        - PLAT=i686
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.6
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.6
        - PLAT=i686
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.7
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.7
        - PLAT=i686
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.8
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.8
        - PLAT=i686
    - os: linux
      env: MB_PYTHON_VERSION=2.7
    - os: linux
      env:
        - MB_PYTHON_VERSION=2.7
        - UNICODE_WIDTH=16
    - os: linux
      env:
        - MB_PYTHON_VERSION=2.7
        - PLAT=i686
    - os: linux
      env:
        - MB_PYTHON_VERSION=2.7
        - PLAT=i686
        - UNICODE_WIDTH=16

before_install:
    - source multibuild/common_utils.sh
    - source multibuild/travis_steps.sh
    - before_install

install:
    # Maybe get and clean and patch source
    - clean_code $REPO_DIR $BUILD_COMMIT
    - find $TRAVIS_BUILD_DIR
    - build_wheel $REPO_DIR $PLAT

script:
    - install_run $PLAT

after_success:
    - python3 -m pip install twine
    - python3 -m twine upload --verbose --skip-existing $TRAVIS_BUILD_DIR/$REPO_DIR/dist/*.whl --repository-url https://upload.pypi.org/legacy/ -u __token__ -p $PYPI_PASSWORD
